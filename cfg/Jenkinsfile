def config;
pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
    }

    tools {
        maven 'maven-default'
        dockerTool 'docker'
    }

    environment {
        FILE_ID_DEVELOP = 'e739f5b7-27df-4f83-bd2a-7450d396412c'
        FILE_ID_MAIN = '65047eb2-2a7d-4afc-bf15-4461e842c721'
        SONAR_SCANNER_HOME = tool 'sonarQube'
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    def fileId = env.JOB_BASE_NAME == 'develop' ? env.FILE_ID_DEVELOP : env.FILE_ID_MAIN
                    configFileProvider([configFile(fileId: fileId, targetLocation: 'config')]) {
                        config = readJSON file: 'config'
                    }
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Unit Test & Coverage') {
            steps {
                sh 'mvn clean test jacoco:report'
            }
            post {
                 always {
                       junit '**/target/surefire-reports/TEST-*.xml'
                 }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -f pom.xml package -DskipTests'
            }
        }

        stage('DAST Analysis') {
            steps{
                    dependencyCheck  additionalArguments: '--format JSON --format HTML' , odcInstallation:'DP-check'

            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarQube') {
                    sh "${env.SONAR_SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=cfg/sonar.properties"
                }
            }
        }
    post {
        failure {
          script {
                      def buildError = currentBuild.rawBuild.getLog(100)
                    slackSend(channel: "despliegues", message: "El build del proyecto ${env.JOB_NAME} falló. Error: ${buildError}")

                  }
        }
        success {
            slackSend(channel: "despliegues", message: "El proyecto ${env.JOB_NAME} se desplegó con éxito")
        }
    }
}