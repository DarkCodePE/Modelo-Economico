def config;
pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
    }

    tools {
        maven 'maven-default'
        dockerTool 'docker'
    }

    environment {
        FILE_ID_DEVELOP = 'e739f5b7-27df-4f83-bd2a-7450d396412c'
        FILE_ID_MAIN = '65047eb2-2a7d-4afc-bf15-4461e842c721'
        SONAR_SCANNER_HOME = tool 'sonarQube'
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    def fileId = env.JOB_BASE_NAME == 'develop' ? env.FILE_ID_DEVELOP : env.FILE_ID_MAIN
                    configFileProvider([configFile(fileId: fileId, targetLocation: 'config')]) {
                        config = readJSON file: 'config'
                    }
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Unit Test & Coverage') {
            steps {
                sh 'mvn clean test jacoco:report'
            }
            post {
                 always {
                       junit '**/target/surefire-reports/TEST-*.xml'
                 }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -f pom.xml package -DskipTests'
            }
        }

        /*stage('DAST Analysis') {
            steps{
                    dependencyCheck  additionalArguments: '--format JSON --format HTML' , odcInstallation:'DP-check'

            }
        }*/

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarQube') {
                    sh "${env.SONAR_SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=cfg/sonar.properties"
                }
            }
        }
        stage('Package & Publish') {
           environment {
						VERSION = readMavenPom().getVersion()
						ARTIFACT_ID = readMavenPom().getArtifactId()
						NAME = "${ARTIFACT_ID}"
					}
            steps {
                withCredentials([azureServicePrincipal('user_azure')]) {
                    sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
					sh 'TOKEN=$(az acr login --name acrhispam --expose-token --output tsv --query accessToken) && docker login acrhispam.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN'
                    sh 'cp target/${ARTIFACT_ID}-${VERSION}.jar cfg/'
					sh 'docker build -t acrhispam.azurecr.io/${NAME}:${VERSION} --build-arg nombreArtefacto=${ARTIFACT_ID}-${VERSION}.jar cfg'
				    sh 'docker inspect -f . acrhispam.azurecr.io/${NAME}:${VERSION}'
					sh 'docker tag acrhispam.azurecr.io/${NAME}:${VERSION} acrhispam.azurecr.io/${NAME}:latest'
					sh 'docker push acrhispam.azurecr.io/${NAME}:${VERSION}'
					sh 'docker push acrhispam.azurecr.io/${NAME}:latest'
					sh 'docker rmi acrhispam.azurecr.io/${NAME}:${VERSION} acrhispam.azurecr.io/${NAME}:latest'
					sh 'docker logout'
					sh 'az logout'
                }
            }
        }

        stage('Deploy') {
            environment {
						ARTIFACT_ID = readMavenPom().getArtifactId()
						AKS = "${config.aks}"
						RESOURCE_GROUP = "${config.resource_group}"
			}
			steps{
						withCredentials([azureServicePrincipal('user_azure')]) {
							sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
							sh 'az aks get-credentials --name ${AKS} --resource-group ${RESOURCE_GROUP} --admin --overwrite-existing'
							sh 'kubectl apply -f ./cfg/${ARTIFACT_ID}-deployment.yml'
						}
			}
        }
        stage('Publishing'){
                environment {
                    ARTIFACT_ID = readMavenPom().getArtifactId()
                    AKS = "${config.aks}"
                    RESOURCE_GROUP = "${config.resource_group}"
                }
                steps{
                     sh '/root/.dotnet/tools/dotnet-apim -c "./cfg/api/apim-service.yml" -o "./cfg/output"'
                     sh 'az group deployment create --resource-group ${RESOURCE_GROUP} --template-file "./cfg/output/apim_deploy.template.json" --parameters "./cfg/output/parameters.json"'
                }
        }
    }
    post {
        failure {
          script {
                      def buildError = currentBuild.rawBuild.getLog(100)
                    slackSend(channel: "despliegues", message: "El build del proyecto ${env.JOB_NAME} falló. Error: ${buildError}")

                  }
        }
        success {
            slackSend(channel: "despliegues", message: "El proyecto ${env.JOB_NAME} se desplegó con éxito")
        }
    }
}